# -*- coding: utf-8 -*-
"""Optimization_of_Electrical_Consumption_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11figkKp-KppSqb0kpj3yOEnneB-oMZ4g
"""

# Commented out IPython magic to ensure Python compatibility.
#importing libraries

import pandas as pd          # data analysis library for handling structured data
import numpy as np           # mathematical library for working with numerical data
import datetime

#!pip install kaleido


# Visualization
import matplotlib.pyplot as plt     # data visualization library for creating graphs and charts
# %matplotlib inline
import seaborn as sns        # data visualization library based on matplotlib for creating more attractive visualizations
import plotly
import plotly.express as px   # interactive data visualization library
import plotly.graph_objects as go   # library for creating interactive graphs and charts
from plotly.subplots import make_subplots
import missingno as msno
import kaleido
import holoviews as hv
from holoviews import opts
hv.extension('bokeh')

from google.colab import drive
drive.mount('/content/drive')

#/content/drive/MyDrive/Data/HomeC.csv

smart_home = pd.read_csv('/content/drive/MyDrive/Data/smart_home_data_preprocessed.csv')
#  Drop the 'Unnamed: 0' column
smart_home = smart_home.drop(columns=['Unnamed: 0'])
smart_home.head()

# Select only numeric columns
numeric_cols = smart_home.select_dtypes(include=["float64", "int64"])

# Create the boxplot
numeric_cols.boxplot(rot=90)

# Set the title of the plot
plt.title('Numeric Columns Boxplot')

# Adjust subplot spacing to prevent x-axis labels from being cut off
plt.subplots_adjust(bottom=0.4)

# Increase the size of the plot
fig = plt.gcf()
fig.set_size_inches(10, 6)

# Grouping the data by 'month' and calculating the mean of 'use'
grouped_df = smart_home.groupby('month')['use'].mean().reset_index()

# Plotting the line plot
plt.figure(figsize=(10, 6))
plt.plot(grouped_df['month'], grouped_df['use'], marker='o')

# Adding title and labels
plt.title('Average Energy Consumption by Month')
plt.xlabel('Month')
plt.ylabel('Energy Consumption in KW')
plt.xticks(grouped_df['month'])  # Ensure the x-ticks correspond to the month values

# Display the plot
plt.grid(True)
plt.show()

# Grouping the data by 'year' and calculating the mean of 'use'
grouped_df_week = smart_home.groupby('weekofyear')['use'].mean().reset_index()

# Plotting the line plot
plt.figure(figsize=(20, 6))
plt.plot(grouped_df_week['weekofyear'], grouped_df_week['use'], marker='o')

# Adding title and labels
plt.title('Average Weekly Energy Consumption')
plt.xlabel('Week')
plt.ylabel('Energy Consumption in KW')
plt.xticks(grouped_df_week['weekofyear'])  # Ensure the x-ticks correspond to the month values

# Display the plot
plt.grid(True)
plt.show()

# Grouping the data by 'month' and calculating the mean of 'gen'
grouped_df_gen = smart_home.groupby('month')['gen'].mean().reset_index()

# Plotting the line plot
plt.figure(figsize=(10, 6))
plt.plot(grouped_df_gen['month'], grouped_df_gen['gen'], marker='o')

# Adding title and labels
plt.title('Average Energy Generation by Month')
plt.xlabel('Month')
plt.ylabel('Energy Consumption in KW')
plt.xticks(grouped_df_gen['month'])  # Ensure the x-ticks correspond to the month values

# Display the plot
plt.grid(True)
plt.show()

# Grouping the data by 'year' and calculating the mean of 'gen'
grouped_df_week_gen = smart_home.groupby('weekofyear')['gen'].mean().reset_index()

# Plotting the line plot
plt.figure(figsize=(20, 6))
plt.plot(grouped_df_week_gen['weekofyear'], grouped_df_week_gen['gen'], marker='o')

# Adding title and labels
plt.title('Average Weekly Energy generation')
plt.xlabel('Week')
plt.ylabel('Energy Generation in KW')
plt.xticks(grouped_df_week_gen['weekofyear'])  # Ensure the x-ticks correspond to the month values

# Display the plot
plt.grid(True)
plt.show()

smart_home.columns

# Columns of interest
columns_of_interest = ['Dishwasher', 'Home office', 'Fridge', 'Wine cellar', 'Garage door', 'Barn', 'Well', 'Microwave', 'Living room','Furnace', 'Kitchen']

# Summing up the energy consumption for each appliance
energy_consumption = smart_home[columns_of_interest].sum()

# Plotting the bar chart
plt.figure(figsize=(10, 6))
energy_consumption.plot(kind='bar', color='skyblue')
plt.title('Energy Consumption by Appliance in kW')
plt.xlabel('Appliance')
plt.ylabel('Total Energy Consumption')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Reset the index to bring back the 'time' column
smart_home = smart_home.reset_index()

# Now you can convert the 'time' column to datetime
smart_home['time'] = pd.to_datetime(smart_home['time'])

# Setting the 'time' column as the index
smart_home.set_index('time', inplace=True)

# Resample the data to daily frequency, taking the sum of 'use' for each day
daily_data = smart_home['use'].resample('D').sum()

# Plotting the line plot for daily energy usage
plt.figure(figsize=(12, 6))
daily_data.plot()
plt.title('Daily Energy Usage')
plt.xlabel('Date')
plt.ylabel('Energy Usage')
plt.grid(True)
plt.tight_layout()
plt.show()

# Setting the 'time' column as the index
#smart_home.set_index('time', inplace=True)

# Resample the data to daily frequency, taking the sum of 'use' for each day
daily_data = smart_home['gen'].resample('D').sum()

# Plotting the line plot for daily energy generation
plt.figure(figsize=(12, 6))
daily_data.plot()
plt.title('Daily Energy Generation')
plt.xlabel('Date')
plt.ylabel('Energy Generation in kW')
plt.grid(True)
plt.tight_layout()
plt.show()

# Resample the data to daily frequency, calculating the mean temperature and total energy use for each day
daily_data = smart_home.resample('D').agg({'temperature': 'mean', 'use': 'sum'})

# Plotting the line plots
plt.figure(figsize=(14, 7))

# Plot for temperature
plt.subplot(2, 1, 1)
plt.plot(daily_data.index, daily_data['temperature'], label='Temperature', color='orange')
plt.title('Daily Temperature and Energy Use')
plt.ylabel('Temperature (Â°C)')
plt.legend()

# Plot for energy use
plt.subplot(2, 1, 2)
plt.plot(daily_data.index, daily_data['use'], label='Energy Use', color='blue')
plt.xlabel('Date')
plt.ylabel('Energy Use (kWh)')
plt.legend()

plt.tight_layout()
plt.show()

# Columns of interest
columns_of_interest = ['temperature', 'humidity', 'visibility', 'apparentTemperature', 'pressure', 'windSpeed', 'windBearing', 'precipIntensity', 'dewPoint', 'precipProbability']

# Generate scatter plots
for column in columns_of_interest:
    plt.figure(figsize=(8, 6))
    plt.scatter(smart_home[column], smart_home['use'], alpha=0.5)
    plt.title(f'Scatter Plot of Use vs {column.capitalize()}')
    plt.xlabel(column.capitalize())
    plt.ylabel('Use')
    plt.show()

# Columns of interest
columns_of_interest = ['temperature', 'humidity', 'visibility', 'apparentTemperature',
                       'pressure', 'windSpeed', 'windBearing', 'precipIntensity',
                       'dewPoint', 'precipProbability']

# Create a scatter plot for each column against 'use'
plt.figure(figsize=(15, 10))

for i, column in enumerate(columns_of_interest, 1):
    plt.subplot(2, 5, i)
    plt.scatter(smart_home[column], smart_home['use'], alpha=0.5)
    plt.title(f'use vs {column}')
    plt.xlabel(column)
    plt.ylabel('use')

plt.tight_layout()
plt.show()

smart_home_corr = smart_home

# Drop the 'year' column if it exists
if 'year' in smart_home_corr.columns:
    smart_home_corr = smart_home_corr.drop(columns=['year', 'overall_energy_consumption','overall_energy_generation', 'outlier', 'Solar', 'House overall','month','year','day','weekday','weekofyear','hour','minute'])

# Selecting only numerical columns
numerical_data = smart_home_corr.select_dtypes(include=['float64', 'int64'])

# Compute the correlation matrix
correlation_matrix = numerical_data.corr()

# Plotting the correlation heatmap
plt.figure(figsize=(24, 20))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()